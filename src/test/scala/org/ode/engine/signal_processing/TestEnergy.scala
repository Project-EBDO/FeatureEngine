/** Copyright (C) 2017-2018 Project-ODE
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
  * (at your option) any later version.
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */

package org.ode.engine.signal_processing

import org.ode.utils.test.ErrorMetrics
import scala.math.abs

import org.scalatest.{FlatSpec, Matchers}

/**
  * Tests for Energy Functions
  * Author: Alexandre Degurse
  */

class TestEnergy extends FlatSpec with Matchers {
  // The error is computed relatively to the expected value
  val maxError = 5.0E-16

  val signal = (1.0 to 50.0 by 1.0).toArray

  // two-sided FFT, non normalized !
  val fft = Array(
    1275.0, 0.0, -24.9999999999997, 397.3636210966324, -24.99999999999993,
    197.8953772076457, -24.999999999999808, 131.05458952782948, -24.999999999999968,
    97.36857137324645, -24.99999999999996, 76.94208842938131, -24.9999999999999,
    63.1427922361826, -24.999999999999872, 53.12770432893002, -24.9999999999999,
    45.47483118202658, -24.99999999999981, 39.39369649921615, -25.000000000000057,
    34.40954801177935, -25.0, 30.21980876024029, -24.999999999999993,
    26.622296008119818, -24.999999999999947, 23.476562645437355, -24.999999999999993,
    20.6817986493119, -24.999999999999975, 18.163563200134064, -24.99999999999998,
    15.865482438603735, -24.99999999999996, 13.743866304819335, -24.999999999999964,
    11.764107030306349, -24.9999999999999, 9.898200219943163, -25.00000000000003,
    8.12299240582265, -24.999999999999996, 6.4189090091931735, -25.00000000000002,
    4.769005055464168, -25.000000000000014, 3.1582344611527358, -25.000000000000014,
    1.5728666813412406, -25.0, 5.329070518200751e-15, -24.999999999999996,
    -1.5728666813412495, -24.99999999999999, -3.158234461152727, -24.99999999999998,
    -4.769005055464206, -24.999999999999908, -6.418909009193229, -25.00000000000003,
    -8.12299240582265, -25.00000000000001, -9.898200219943009, -25.000000000000036,
    -11.764107030306283, -25.000000000000043, -13.74386630481922, -25.000000000000007,
    -15.86548243860368, -25.00000000000002, -18.163563200134, -25.00000000000001,
    -20.681798649311833, -25.000000000000032, -23.47656264543726, -24.99999999999998,
    -26.622296008119733, -24.99999999999995, -30.2198087602401, -25.000000000000057,
    -34.40954801177935, -25.00000000000003, -39.393696499216254, -25.00000000000002,
    -45.474831182026676, -25.000000000000096, -53.12770432893008, -25.000000000000014,
    -63.14279223618266, -25.00000000000004, -76.94208842938136, -25.000000000000107,
    -97.36857137324651, -25.000000000000224, -131.05458952782942, -25.000000000000178,
    -197.89537720764574, -25.000000000000696, -397.36362109663287
  )

  // normalized PSD !
  val psd = Array(32512.5, 6340.913894841126, 1591.5032128062544, 712.0122174523138,
    404.2255476506797, 261.80339887498934, 184.48048845526898, 137.90211869048858,
    107.7184108413529, 87.07453295489456, 72.3606797749978, 61.529473660219686,
    53.34986578975805, 47.045959745805675, 42.109471814827195, 38.196601125010474,
    35.068541320385705, 32.55575444018984, 30.53576856882006, 28.918974703763215,
    27.639320225002134, 26.648095714732058, 25.909736368761724, 25.398977796464525,
    25.09895638389095, 12.5
  )


  val eSig = Energy.fromRawSignal(signal)
  val eFFTTwo = Energy.fromFFTTwoSided(fft)
  val eFFTOne = Energy.fromFFTOneSided(fft.take(52))
  val ePSD = Energy.fromPSD(psd)

  print(s"length of fft two: ${fft.length} \n")

  // can be obtained with the following matlab code:
  // signal = 1:50;
  // F = fft(signal);
  // eExpected = sum(F.*conj(F)) / 50
  val eExpected = 42925.0

  "Energy" should "compute the energy of the signal when given the signal or the FFT or the PSD" in {
    abs((eSig - eExpected) / eExpected) should be < maxError
    abs((eFFTOne - eSig) / eSig) should be < maxError
    abs((eFFTTwo - eSig) / eSig) should be < maxError
    abs((ePSD - eSig) / eSig) should be < maxError
  }
}
